module "redis" {
    max_batch_size = 5
    batch_timeout = 10
    max_queue_size = 20
}

module "registrar" {
    expires_min = 5
    expires_max = 7200
    expires_default = 1200
    keepalive_interval = 30
    bindings_max = 15
    process_subscriptions = true
    redis {
        use_functions = no
        scripts_dir = /usr/lib/sems/scripts/registrar
        write {
            hosts = localhost:6379
        }
        read {
            hosts = localhost:6379
        }
    }
}

module "options_prober" {
    export_metrics = yes
}
module "registrar_client" {}

#module "postgresql" {}
include(/etc/sems/etc/postgresql_proxy.conf)

module "http_client" {

    resend_interval=5000
    resend_queue_max=0

    destination "pcap" {
        mode=put
        urls={ http://127.0.0.1:6666/pcap-dumps/ }
        on_success {
            action=remove
        }
        on_failure {
            action=nothing
        }
        requeue_limit=0
        #~ succ_codes={2xx,308,4xx,50x,529}
    }

    destination "calls" {
        mode=post
        urls={ http://test:test@127.0.0.1:8888/calls }
        content_type='application/vnd.api+json'
        on_success { action = nothing }
        on_failure { action = nothing }
    }

    destination "rsr" {
        mode=put
        urls={ http://127.0.0.1/upload/ }
        on_success {
            action=remove
        }
        on_failure {
            action=nothing
        }
        requeue_limit=0
        min_file_size = 100000
        #~ succ_codes={2xx,308,4xx,50x,529}
    }
}

module "radius_client" { }

module "yeti" {
    db_refresh_interval = 5

    lega_cdr_headers {
        header(p-charge-info, string)
        header(StringTestHeader, string)
        header(ArrayTestHeader, array)
        header(NxStringHeader, string)
        header(NxArrayHeader, array)

        add_sip_reason=true
        add_q850_reason=true
    }

    legb_response_cdr_headers {
        header(X-VND-INIT-INT, string)
        header(X-VND-NEXT-INT, string)
        header(X-VND-INIT-RATE, string)
        header(X-VND-NEXT-RATE, string)
        header(X-VND-CF, string)

        add_sip_reason=true
        add_q850_reason=true
    }

    postgresql_debug = yes
    core_options_handling = yes
    pcap_memory_logger = yes
    #~ http_events_destination = calls
    write_internal_disconnect_code = yes

    pop_id = 4
    msg_logger_dir = /var/spool/sems/dump

    #audio_recorder_dir = /var/spool/sems/record
    audio_recorder_compress = false
    audio_recorder_http_destination = rsr

    #ip_auth_reject_if_no_matched = no
    ip_auth_header = "X-SRC-IP"

    routing {
        new_codec_groups = true
        schema = switch21
        #function = route_debug
        function = route_release
        pass_input_interface_name = true
        init = init

        headers {
            header(X-YETI-AUTH)
            header(Diversion, json, uri_json_array)
            header(X-ORIG-IP, inet)
            header(X-ORIG-PORT, smallint)
            header(X-ORIG-PROTO, smallint)
            header(P-Asserted-Identity)
            header(P-Preferred-Identity)
            header(Privacy)
            header(Remote-Party-ID)
            header(RPID-Privacy)
        }

        master_pool {
            host = 127.0.0.1
            port = 5432
            name = yeti
            user = yeti
            pass = yeti
            #connect_timeout = 11
            #keepalives_interval = 10

            size = 1
            check_interval = 10
            statement_timeout=3000
        }

        # failover_to_slave = false
        failover_to_slave = true
        slave_pool {
            host = 127.0.0.1
            port = 5432
            name = yeti
            user = yeti
            pass = yeti
            #connect_timeout = 12
            #keepalives_interval = 10

            size = 1
            check_interval = 1
            statement_timeout=3000
        }

    }

    cdr {
        pool_size = 1
        auth_pool_size = 1
        auth_batch_size = 50
        auth_batch_timeout = 2000

        batch_size = 10000
        batch_timeout = 5000
        check_interval = 5000

        schema = switch
        function = writecdr

        master {
            host = 127.0.0.1
            port = 5432
            name = cdr
            user = cdr
            pass = cdr
            #connect_timeout = 10
            #keepalives_interval = 10
        }

        failover_to_slave = false
        slave {
            host = 127.0.0.1
            port = 5432
            name = cdr
            user = cdr
            pass = cdr
            #connect_timeout = 10
            #keepalives_interval = 10
        }

    }

    resources {
        reject_on_error = false
        write {
            hosts = 127.0.0.1:6379
            timeout = 5000
        }
        read {
            hosts = 127.0.0.1:6379
            timeout = 2000
        }
    }

    rpc {
        calls_show_limit = 1000
    }

    statistics {
        active-calls {
            period = 5
            clickhouse {
                table = routeserver.active_calls
                # destinations = {calls}
                buffering = true
                allowed_fields = {
                    resources,
                    audio_record_enabled,
                    auth_orig_ip,
                    auth_orig_port
                }
            }
        }
    }

    auth {
        realm = "test"
        skip_logging_invite_success = true
        skip_logging_invite_challenge = true
    }

}
